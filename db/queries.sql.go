// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (id, sender, receiver, room_id, body, created_at) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, sender, receiver, room_id, body, created_at
`

type CreateMessageParams struct {
	ID        string
	Sender    string
	Receiver  string
	RoomID    pgtype.Text
	Body      pgtype.Text
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.ID,
		arg.Sender,
		arg.Receiver,
		arg.RoomID,
		arg.Body,
		arg.CreatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.Receiver,
		&i.RoomID,
		&i.Body,
		&i.CreatedAt,
	)
	return i, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (id, room_name, created_at) VALUES ($1, $2, $3) RETURNING id, room_name, created_at
`

type CreateRoomParams struct {
	ID        string
	RoomName  string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, arg.ID, arg.RoomName, arg.CreatedAt)
	var i Room
	err := row.Scan(&i.ID, &i.RoomName, &i.CreatedAt)
	return i, err
}

const createRoomMembership = `-- name: CreateRoomMembership :one
INSERT INTO room_memberships (id, user_id, room_id, joined_at, left_at) VALUES ($1, $2, $3, $4, $5) RETURNING id, user_id, room_id, joined_at, left_at
`

type CreateRoomMembershipParams struct {
	ID       string
	UserID   string
	RoomID   string
	JoinedAt pgtype.Timestamp
	LeftAt   pgtype.Timestamp
}

func (q *Queries) CreateRoomMembership(ctx context.Context, arg CreateRoomMembershipParams) (RoomMembership, error) {
	row := q.db.QueryRow(ctx, createRoomMembership,
		arg.ID,
		arg.UserID,
		arg.RoomID,
		arg.JoinedAt,
		arg.LeftAt,
	)
	var i RoomMembership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.JoinedAt,
		&i.LeftAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, first_name, last_name, email, phone, created_at) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, first_name, last_name, email, phone, created_at
`

type CreateUserParams struct {
	ID        string
	FirstName string
	LastName  string
	Email     string
	Phone     pgtype.Text
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :one
DELETE FROM messages WHERE id = $1 RETURNING id, sender, receiver, room_id, body, created_at
`

func (q *Queries) DeleteMessage(ctx context.Context, id string) (Message, error) {
	row := q.db.QueryRow(ctx, deleteMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.Receiver,
		&i.RoomID,
		&i.Body,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :one
DELETE FROM rooms WHERE id = $1 RETURNING id, room_name, created_at
`

func (q *Queries) DeleteRoom(ctx context.Context, id string) (Room, error) {
	row := q.db.QueryRow(ctx, deleteRoom, id)
	var i Room
	err := row.Scan(&i.ID, &i.RoomName, &i.CreatedAt)
	return i, err
}

const deleteRoomMembership = `-- name: DeleteRoomMembership :one
DELETE FROM room_memberships WHERE user_id = $1 AND room_id = $2 RETURNING id, user_id, room_id, joined_at, left_at
`

type DeleteRoomMembershipParams struct {
	UserID string
	RoomID string
}

func (q *Queries) DeleteRoomMembership(ctx context.Context, arg DeleteRoomMembershipParams) (RoomMembership, error) {
	row := q.db.QueryRow(ctx, deleteRoomMembership, arg.UserID, arg.RoomID)
	var i RoomMembership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.JoinedAt,
		&i.LeftAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE id = $1 RETURNING id, first_name, last_name, email, phone, created_at
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const getMessagesByRoomID = `-- name: GetMessagesByRoomID :many
SELECT id, sender, receiver, room_id, body, created_at from messages WHERE room_id = $1
`

func (q *Queries) GetMessagesByRoomID(ctx context.Context, roomID pgtype.Text) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesByRoomID, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.Receiver,
			&i.RoomID,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesBySenderAndReceiver = `-- name: GetMessagesBySenderAndReceiver :many
SELECT id, sender, receiver, room_id, body, created_at from messages WHERE sender = $1 AND receiver = $2
`

type GetMessagesBySenderAndReceiverParams struct {
	Sender   string
	Receiver string
}

func (q *Queries) GetMessagesBySenderAndReceiver(ctx context.Context, arg GetMessagesBySenderAndReceiverParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesBySenderAndReceiver, arg.Sender, arg.Receiver)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.Receiver,
			&i.RoomID,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesBySenderAndReceiverAndRoomID = `-- name: GetMessagesBySenderAndReceiverAndRoomID :many
SELECT id, sender, receiver, room_id, body, created_at from messages WHERE sender = $1 AND receiver = $2 AND room_id = $3
`

type GetMessagesBySenderAndReceiverAndRoomIDParams struct {
	Sender   string
	Receiver string
	RoomID   pgtype.Text
}

func (q *Queries) GetMessagesBySenderAndReceiverAndRoomID(ctx context.Context, arg GetMessagesBySenderAndReceiverAndRoomIDParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesBySenderAndReceiverAndRoomID, arg.Sender, arg.Receiver, arg.RoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.Receiver,
			&i.RoomID,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesBySenderAndRoomID = `-- name: GetMessagesBySenderAndRoomID :many
SELECT id, sender, receiver, room_id, body, created_at from messages WHERE sender = $1 AND room_id = $2
`

type GetMessagesBySenderAndRoomIDParams struct {
	Sender string
	RoomID pgtype.Text
}

func (q *Queries) GetMessagesBySenderAndRoomID(ctx context.Context, arg GetMessagesBySenderAndRoomIDParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesBySenderAndRoomID, arg.Sender, arg.RoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.Receiver,
			&i.RoomID,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomByID = `-- name: GetRoomByID :one
SELECT id, room_name, created_at from rooms WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoomByID(ctx context.Context, id string) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomByID, id)
	var i Room
	err := row.Scan(&i.ID, &i.RoomName, &i.CreatedAt)
	return i, err
}

const getRoomMembershipByUserIDAndRoomID = `-- name: GetRoomMembershipByUserIDAndRoomID :one
SELECT id, user_id, room_id, joined_at, left_at from room_memberships WHERE user_id = $1 AND room_id = $2 LIMIT 1
`

type GetRoomMembershipByUserIDAndRoomIDParams struct {
	UserID string
	RoomID string
}

func (q *Queries) GetRoomMembershipByUserIDAndRoomID(ctx context.Context, arg GetRoomMembershipByUserIDAndRoomIDParams) (RoomMembership, error) {
	row := q.db.QueryRow(ctx, getRoomMembershipByUserIDAndRoomID, arg.UserID, arg.RoomID)
	var i RoomMembership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.JoinedAt,
		&i.LeftAt,
	)
	return i, err
}

const getRoomMembershipsByRoomID = `-- name: GetRoomMembershipsByRoomID :many
SELECT id, user_id, room_id, joined_at, left_at from room_memberships WHERE room_id = $1
`

func (q *Queries) GetRoomMembershipsByRoomID(ctx context.Context, roomID string) ([]RoomMembership, error) {
	rows, err := q.db.Query(ctx, getRoomMembershipsByRoomID, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoomMembership
	for rows.Next() {
		var i RoomMembership
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.JoinedAt,
			&i.LeftAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomMembershipsByUserID = `-- name: GetRoomMembershipsByUserID :many
SELECT id, user_id, room_id, joined_at, left_at from room_memberships WHERE user_id = $1
`

func (q *Queries) GetRoomMembershipsByUserID(ctx context.Context, userID string) ([]RoomMembership, error) {
	rows, err := q.db.Query(ctx, getRoomMembershipsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoomMembership
	for rows.Next() {
		var i RoomMembership
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.JoinedAt,
			&i.LeftAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomsByUserID = `-- name: GetRoomsByUserID :many
SELECT rooms.id, rooms.room_name, rooms.created_at from rooms JOIN room_memberships ON rooms.id = room_memberships.room_id WHERE room_memberships.user_id = $1
`

func (q *Queries) GetRoomsByUserID(ctx context.Context, userID string) ([]Room, error) {
	rows, err := q.db.Query(ctx, getRoomsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.RoomName, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, phone, created_at from users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, email, phone, created_at from users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE rooms SET room_name = $1 WHERE id = $2 RETURNING id, room_name, created_at
`

type UpdateRoomParams struct {
	RoomName string
	ID       string
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoom, arg.RoomName, arg.ID)
	var i Room
	err := row.Scan(&i.ID, &i.RoomName, &i.CreatedAt)
	return i, err
}

const updateRoomMembershipLeftAt = `-- name: UpdateRoomMembershipLeftAt :one
UPDATE room_memberships SET left_at = $1 WHERE user_id = $2 AND room_id = $3 RETURNING id, user_id, room_id, joined_at, left_at
`

type UpdateRoomMembershipLeftAtParams struct {
	LeftAt pgtype.Timestamp
	UserID string
	RoomID string
}

func (q *Queries) UpdateRoomMembershipLeftAt(ctx context.Context, arg UpdateRoomMembershipLeftAtParams) (RoomMembership, error) {
	row := q.db.QueryRow(ctx, updateRoomMembershipLeftAt, arg.LeftAt, arg.UserID, arg.RoomID)
	var i RoomMembership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.JoinedAt,
		&i.LeftAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET first_name = $1, last_name = $2, email = $3, phone = $4 WHERE id = $5 RETURNING id, first_name, last_name, email, phone, created_at
`

type UpdateUserParams struct {
	FirstName string
	LastName  string
	Email     string
	Phone     pgtype.Text
	ID        string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}
